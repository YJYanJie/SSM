<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <!--scope="" 可以设置该类型是单例还是多例：prototype   singleton-->
    <!--
        bean中的class不可以是接口(接口类型不可以直接进行实例化)
    -->
    <bean id="studentOne" class="com.yj.spring.pojo.Student"></bean>

    <!-- 使用set方法注入  -->
    <bean id="studentTwo" class="com.yj.spring.pojo.Student">
        <!--
            property:通过成员变量的set方法进行赋值
            name：设置需要赋值的属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）
            value：设置为属性所赋的值
        -->
        <!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 -->
        <property name="sid" value="1001"></property>
        <property name="sname" value="张三"></property>
        <property name="age" value="23"></property>
        <property name="gender" value="男"></property>
    </bean>

    <!--  使用构造器  -->
    <bean id="studentThree" class="com.yj.spring.pojo.Student">
        <constructor-arg value="1002"></constructor-arg>
        <constructor-arg value="李四"></constructor-arg>
        <constructor-arg value="女"></constructor-arg>
        <constructor-arg value="25" name="age"></constructor-arg>
    </bean>

    <bean id="studentFour" class="com.yj.spring.pojo.Student">
        <property name="sid" value="1003"></property>
        <!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 -->
        <!-- 解决方案一：使用XML实体来代替 -->
        <!--
            <： &lt;
            >： &gt;
            CDATA节: <![CDATA[  ]]>
        -->
<!--        <property name="sname" value="&lt;王五&gt;"></property>-->

        <!-- 解决方案二：使用CDATA节 <![CDATA[  ]]> -->
        <!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 -->
        <!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 -->
        <!-- 所以CDATA节中写什么符号都随意 -->
        <property name="sname">
            <value><![CDATA[<王五>]]></value>
        </property>

        <property name="gender">
            <!-- 使用<null />标签给属性赋 null -->
            <null />
        </property>
    </bean>

    <bean id="studentFive" class="com.yj.spring.pojo.Student">
        <property name="sid" value="1004"></property>
        <property name="sname" value="赵六"></property>
        <property name="age" value="26"></property>
        <property name="gender" value="男"></property>
        <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
<!--        <property name="clazz" ref="clazzOne"></property>-->
        <!-- 级联的方式：要保证提前为clazz属性赋值或者实例化 -->
<!--        <property name="clazz.cid" value="2222"></property>-->
<!--        <property name="clazz.name" value="倔强青铜班"></property>-->
        <!-- 内部bean方式赋值，只能在当前bean的内部使用，不能直接通过IOC容器直接获取 -->
        <property name="clazz">
            <bean id="clazzInner" class="com.yj.spring.pojo.Clazz">
                <property name="cid" value="2222"></property>
                <property name="cname" value="倔强青铜班"></property>
            </bean>
        </property>
    </bean>

    <bean id="studentSix" class="com.yj.spring.pojo.Student">
        <property name="sid" value="1004"></property>
        <property name="sname" value="赵六"></property>
        <property name="age" value="26"></property>
        <property name="gender" value="男"></property>
        <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
        <!--        <property name="clazz" ref="clazzOne"></property>-->
        <!-- 级联的方式：要保证提前为clazz属性赋值或者实例化 -->
        <!--        <property name="clazz.cid" value="2222"></property>-->
        <!--        <property name="clazz.name" value="倔强青铜班"></property>-->
        <!-- 内部bean方式赋值，只能在当前bean的内部使用，不能直接通过IOC容器直接获取 -->
        <property name="clazz">
            <bean id="clazzInner" class="com.yj.spring.pojo.Clazz">
                <property name="cid" value="2222"></property>
                <property name="cname" value="倔强青铜班"></property>
            </bean>
        </property>
        <property name="hobby">
            <array>
                <value>抽烟</value>
                <value>喝酒</value>
                <value>烫头</value>
            </array>
        </property>
    </bean>

    <bean id="studentSeven" class="com.yj.spring.pojo.Student">
        <property name="sid" value="1004"></property>
        <property name="sname" value="赵六"></property>
        <property name="age" value="26"></property>
        <property name="gender" value="男"></property>
        <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
        <!--        <property name="clazz" ref="clazzOne"></property>-->
        <!-- 级联的方式：要保证提前为clazz属性赋值或者实例化 -->
        <!--        <property name="clazz.cid" value="2222"></property>-->
        <!--        <property name="clazz.name" value="倔强青铜班"></property>-->
        <!-- 内部bean方式赋值，只能在当前bean的内部使用，不能直接通过IOC容器直接获取 -->
        <property name="clazz">
            <bean id="clazzInner" class="com.yj.spring.pojo.Clazz">
                <property name="cid" value="2222"></property>
                <property name="cname" value="倔强青铜班"></property>
            </bean>
        </property>
        <property name="hobby">
            <array>
                <value>抽烟</value>
                <value>喝酒</value>
                <value>烫头</value>
            </array>
        </property>
<!--        <property name="teacherMap">-->
<!--            <map>-->
<!--                <entry key="10086" value-ref="teacherOne"></entry>-->
<!--                <entry key="10010" value-ref="teacherTwo"></entry>-->
<!--            </map>-->
<!--        </property>-->
        <property name="teacherMap" ref="teacherMap"></property>
    </bean>

    <bean id="clazzOne" class="com.yj.spring.pojo.Clazz">
        <property name="cid" value="1111"></property>
        <property name="cname" value="联盟大师"></property>
     </bean>

    <bean id="clazzTwo" class="com.yj.spring.pojo.Clazz">
        <property name="cid" value="3333"></property>
        <property name="cname" value="不屈白银"></property>
<!--        <property name="students">-->
<!--            <list>-->
<!--                <ref bean="studentOne"></ref>-->
<!--                <ref bean="studentTwo"></ref>-->
<!--                <ref bean="studentThree"></ref>-->
<!--            </list>-->
<!--        </property>-->
        <property name="students" ref="studentList"></property>
    </bean>

    <bean id="teacherOne" class="com.yj.spring.pojo.Teacher">
        <property name="tid" value="10086"></property>
        <property name="tname" value="移动"></property>
    </bean>

    <bean id="teacherTwo" class="com.yj.spring.pojo.Teacher">
        <property name="tid" value="10010"></property>
        <property name="tname" value="电信"></property>
    </bean>

    <!-- 配置一个集合类型的bean，需要使用util的约束 -->
    <util:list id="studentList">
        <ref bean="studentOne"></ref>
        <ref bean="studentTwo"></ref>
        <ref bean="studentThree"></ref>
    </util:list>

    <util:map id="teacherMap">
        <entry key="10086" value-ref="teacherOne"></entry>
        <entry key="10010" value-ref="teacherTwo"></entry>
    </util:map>

    <bean id="studentEight" class="com.yj.spring.pojo.Student"
          p:sid="1006" p:sname="小明" p:clazz-ref="clazzOne" p:teacherMap-ref="teacherMap">
    </bean>

<!--    <bean id="myBeanPostProcessor" class="com.yj.spring.process.MyBeanPostProcessor"></bean>-->

</beans>